#include "Overlook.h"
using namespace Overlook;

NAMESPACE_UPP

INITBLOCK {
	System::Register<DataBridge>("DataBridge");
	System::Register<Normalized>("Normalized data");
	System::Register<HurstWindow>("Hurst window");
	System::Register<SimpleHurstWindow>("Simplified Hurst window");
	System::Register<ValueChange>("Change of data-values");
	System::Register<MovingAverage>("Moving average");
	System::Register<MovingAverageConvergenceDivergence>("Moving Average Convergence/Divergence");
	System::Register<AverageDirectionalMovement>("Average Directional Movement");
	System::Register<BollingerBands>("Bollinger Bands");
	System::Register<Envelopes>("Envelopes");
	System::Register<Channel>("Channel");
	System::Register<ParabolicSAR>("Parabolic SAR");
	System::Register<StandardDeviation>("Standard Deviation");
	System::Register<AverageTrueRange>("Average true Range");
	System::Register<BearsPower>("Bears Power");
	System::Register<BullsPower>("Bulls Power");
	System::Register<CommodityChannelIndex>("Commodity Channel Index");
	System::Register<DeMarker>("DeMarker");
	System::Register<ForceIndex>("Force Index");
	System::Register<Momentum>("Momentum");
	System::Register<OsMA>("OsMA");
	
	System::Register<RelativeStrengthIndex>("Relative Strength Index");
	System::Register<RelativeVigorIndex>("Relative Vigor Index");
	System::Register<StochasticOscillator>("Stochastic Oscillator");
	System::Register<WilliamsPercentRange>("Williams Percent Range");
	System::Register<AccumulationDistribution>("Accumulation Distribution");
	System::Register<MoneyFlowIndex>("Money Flow Index");
	System::Register<ValueAndVolumeTrend>("Value And Volume Trend");
	System::Register<OnBalanceVolume>("On Balance Volume");
	System::Register<Volumes>("Volumes");
	System::Register<AcceleratorOscillator>("Accelerator Oscillator");
	System::Register<GatorOscillator>("Gator Oscillator");
	System::Register<AwesomeOscillator>("Awesome Oscillator");
	System::Register<Fractals>("Fractals");
	
	
	System::Register<FractalOsc>("FractalOsc");
	System::Register<MarketFacilitationIndex>("Market Facilitation Index");
	System::Register<LinearTimeFrames>("Linear TimeFrames");
	System::Register<LinearWeekTime>("Linear WeekTime");
	System::Register<SupportResistance>("Support/Resistance");
	System::Register<SupportResistanceOscillator>("Support/Resistance Oscillator");
	System::Register<Psychological>("Psychological Oscillator");
	System::Register<ZigZag>("Zig-Zag");
	System::Register<ZigZagOsc>("Zig-Zag Oscillator");
	System::Register<TrendChange>("Trend Change");
	
	System::Register<TrendChangeEdge>("Trend Change Edge");
	System::Register<PeriodicalChange>("Periodical Change");
	System::Register<VolatilityAverage>("Volatility Average");
	System::Register<MinimalLabel>("Minimal Label");
	System::Register<VolatilitySlots>("Volatility Slots");
	System::Register<VolumeSlots>("Volume Slots");
	System::Register<ChannelOscillator>("Channel Oscillator");
	System::Register<ScissorChannelOscillator>("Scissor Channel Oscillator");
	System::Register<TrendIndex>("Trend Index");
	System::Register<OnlineMinimalLabel>("Online Minimal Label");
	
	System::Register<VolatilityContext>("Volatility Context");
	System::Register<ChannelContext>("Channel Context");
	System::Register<SelectiveMinimalLabel>("Selective Minimal Label");
	System::Register<GridSignal>("Grid Signal");
	System::Register<Anomaly>("Anomaly");
	System::Register<VariantDifference>("Variant Difference");
	System::Register<ScalperSignal>("Scalper Signal");
	System::Register<EasierScalperSignal>("Easier Scalper Signal");
	System::Register<PulseIndicator>("Pulse");
	System::Register<SimpleHeatmap>("Simple Heatmap");
	System::Register<Avoidance>("Avoidance");
	System::Register<AvoidancePeaks>("Avoidance Peaks");
	System::Register<QuantitativeQualitativeEstimation>("QuantitativeQualitativeEstimation");
	System::Register<Laguerre>("Laguerre");
	//System::Register<AnalyzerViewer>("Analyzer Viewer");
	//System::Register<ScalperViewer>("Scalper Viewer");
	
	//System::Register<ExampleAdvisor>("Example Advisor", CORE_EXPERTADVISOR);
	System::Register<DqnAdvisor>("Dqn Advisor", CORE_EXPERTADVISOR);
	
	
	
    System::RegisterCommon<DataBridgeCommon, DataBridgeCtrl>("DataBridge");
	System::RegisterEvent<DataBridge>("Up Change -1 ", DB_UP1);
	System::RegisterEvent<DataBridge>("Up Change -2 ", DB_UP2);
	System::RegisterEvent<DataBridge>("Up Change -3 ", DB_UP3);
	System::RegisterEvent<DataBridge>("Up Change -4 ", DB_UP4);
	System::RegisterEvent<DataBridge>("Up Change -5 ", DB_UP5);
	System::RegisterEvent<DataBridge>("Down Change-1 ", DB_DOWN1);
	System::RegisterEvent<DataBridge>("Down Change-2 ", DB_DOWN2);
	System::RegisterEvent<DataBridge>("Down Change-3 ", DB_DOWN3);
	System::RegisterEvent<DataBridge>("Down Change-4 ", DB_DOWN4);
	System::RegisterEvent<DataBridge>("Down Change-5 ", DB_DOWN5);
	System::RegisterEvent<DataBridge>("Up trend", DB_UPTREND);
    System::RegisterEvent<DataBridge>("Down trend", DB_DOWNTREND);
    System::RegisterEvent<DataBridge>("High up trend", DB_HIGHUPTREND);
    System::RegisterEvent<DataBridge>("High down trend", DB_HIGHDOWNTREND);
    System::RegisterEvent<DataBridge>("Low up trend", DB_LOWUPTREND);
    System::RegisterEvent<DataBridge>("Low down trend", DB_LOWDOWNTREND);
    System::RegisterEvent<DataBridge>("Sideways trend", DB_SIDEWAYSTREND);
    System::RegisterEvent<DataBridge>("High break", DB_HIGHBREAK);
    System::RegisterEvent<DataBridge>("Low break", DB_LOWBREAK);
    System::RegisterEvent<DataBridge>("Long high break", DB_LONGHIGHBREAK);
    System::RegisterEvent<DataBridge>("Long low break", DB_LONGLOWBREAK);
    System::RegisterEvent<DataBridge>("Trend reversal up", DB_REVERSALUP);
    System::RegisterEvent<DataBridge>("Trend reversal down", DB_REVERSALDOWN);
    System::RegisterEvent<DataBridge>("Trend stop up", DB_STOPUP);
    System::RegisterEvent<DataBridge>("Trend stop down", DB_STOPDOWN);
    System::RegisterEvent<MovingAverage>("Over average", MA_OVERAV);
    System::RegisterEvent<MovingAverage>("Below average", MA_BELOWAV);
    System::RegisterEvent<MovingAverage>("Trend up", MA_TRENDUP);
    System::RegisterEvent<MovingAverage>("Trend down", MA_TRENDDOWN);
    System::RegisterEvent<MovingAverageConvergenceDivergence>("Over zero", MACD_OVERZERO);
    System::RegisterEvent<MovingAverageConvergenceDivergence>("Below zero", MACD_BELOWZERO);
    System::RegisterEvent<MovingAverageConvergenceDivergence>("Trend up", MACD_TRENDUP);
    System::RegisterEvent<MovingAverageConvergenceDivergence>("Trend down", MACD_TRENDDOWN);
    System::RegisterEvent<BollingerBands>("High over band", BB_HIGHBAND);
    System::RegisterEvent<BollingerBands>("Low below band", BB_LOWBAND);
    System::RegisterEvent<ParabolicSAR>("Trend up", PSAR_TRENDUP);
    System::RegisterEvent<ParabolicSAR>("Trend down", PSAR_TRENDDOWN);
    System::RegisterEvent<StandardDeviation>("Increasing", STDDEV_INC);
    System::RegisterEvent<StandardDeviation>("Decreasing", STDDEV_DEC);
    System::RegisterEvent<AverageTrueRange>("Increasing", ATR_INC);
    System::RegisterEvent<AverageTrueRange>("Decreasing", ATR_DEC);
    System::RegisterEvent<BearsPower>("Over zero", BEAR_OVERZERO);
    System::RegisterEvent<BearsPower>("Below zero", BEAR_BELOWZERO);
    System::RegisterEvent<BearsPower>("Increasing", BEAR_INC);
    System::RegisterEvent<BearsPower>("Decreasing", BEAR_DEC);
    System::RegisterEvent<BullsPower>("Over zero", BULL_OVERZERO);
    System::RegisterEvent<BullsPower>("Below zero", BULL_BELOWZERO);
    System::RegisterEvent<BullsPower>("Increasing", BULL_INC);
    System::RegisterEvent<BullsPower>("Decreasing", BULL_DEC);
    System::RegisterEvent<CommodityChannelIndex>("Over zero", CCI_OVERZERO);
    System::RegisterEvent<CommodityChannelIndex>("Below zero", CCI_BELOWZERO);
    System::RegisterEvent<CommodityChannelIndex>("Over high", CCI_OVERHIGH);
    System::RegisterEvent<CommodityChannelIndex>("Below low", CCI_BELOWLOW);
    System::RegisterEvent<CommodityChannelIndex>("Increasing", CCI_INC);
    System::RegisterEvent<CommodityChannelIndex>("Decreasing", CCI_DEC);
    System::RegisterEvent<DeMarker>("Over zero", DEM_OVERZERO);
    System::RegisterEvent<DeMarker>("Below zero", DEM_BELOWZERO);
    System::RegisterEvent<DeMarker>("Over high", DEM_OVERHIGH);
    System::RegisterEvent<DeMarker>("Below low", DEM_BELOWLOW);
    System::RegisterEvent<DeMarker>("Increasing", DEM_INC);
    System::RegisterEvent<DeMarker>("Decreasing", DEM_DEC);
    System::RegisterEvent<Momentum>("Over zero", MOM_OVERZERO);
    System::RegisterEvent<Momentum>("Below zero", MOM_BELOWZERO);
    System::RegisterEvent<Momentum>("Increasing", MOM_INC);
    System::RegisterEvent<Momentum>("Decreasing", MOM_DEC);
    System::RegisterEvent<RelativeStrengthIndex>("Over zero", RSI_OVERZERO);
    System::RegisterEvent<RelativeStrengthIndex>("Below zero", RSI_BELOWZERO);
    System::RegisterEvent<RelativeStrengthIndex>("Increasing", RSI_INC);
    System::RegisterEvent<RelativeStrengthIndex>("Decreasing", RSI_DEC);
    System::RegisterEvent<RelativeVigorIndex>("Over zero", RVI_OVERZERO);
    System::RegisterEvent<RelativeVigorIndex>("Below zero", RVI_BELOWZERO);
    System::RegisterEvent<RelativeVigorIndex>("Increasing", RVI_INC);
    System::RegisterEvent<RelativeVigorIndex>("Decreasing", RVI_DEC);
    System::RegisterEvent<RelativeVigorIndex>("Increasing diff", RVI_INCDIFF);
    System::RegisterEvent<RelativeVigorIndex>("Decreasing diff", RVI_DECDIFF);
    System::RegisterEvent<StochasticOscillator>("Over zero", STOCH_OVERZERO);
    System::RegisterEvent<StochasticOscillator>("Below zero", STOCH_BELOWZERO);
    System::RegisterEvent<StochasticOscillator>("Over high", STOCH_OVERHIGH);
    System::RegisterEvent<StochasticOscillator>("Below low", STOCH_BELOWLOW);
    System::RegisterEvent<StochasticOscillator>("Increasing", STOCH_INC);
    System::RegisterEvent<StochasticOscillator>("Decreasing", STOCH_DEC);
    System::RegisterEvent<AcceleratorOscillator>("Over zero", ACC_OVERZERO);
    System::RegisterEvent<AcceleratorOscillator>("Below zero", ACC_BELOWZERO);
    System::RegisterEvent<AcceleratorOscillator>("Increasing", ACC_INC);
    System::RegisterEvent<AcceleratorOscillator>("Decreasing", ACC_DEC);
    System::RegisterEvent<AwesomeOscillator>("Over zero", AWE_OVERZERO);
    System::RegisterEvent<AwesomeOscillator>("Below zero", AWE_BELOWZERO);
    System::RegisterEvent<AwesomeOscillator>("Increasing", AWE_INC);
    System::RegisterEvent<AwesomeOscillator>("Decreasing", AWE_DEC);
    System::RegisterEvent<PeriodicalChange>("Increasing", PC_INC);
    System::RegisterEvent<PeriodicalChange>("Decreasing", PC_DEC);
    System::RegisterEvent<VolatilityAverage>("Lowest", VOL_LOWEST);
    System::RegisterEvent<VolatilityAverage>("Low", VOL_LOW);
    System::RegisterEvent<VolatilityAverage>("High", VOL_HIGH);
    System::RegisterEvent<VolatilityAverage>("Highest", VOL_HIGHEST);
    System::RegisterEvent<VolatilitySlots>("Low", VOLSL_LOW);
    System::RegisterEvent<VolatilitySlots>("Medium", VOLSL_MED);
    System::RegisterEvent<VolatilitySlots>("High", VOLSL_HIGH);
    System::RegisterEvent<VolatilitySlots>("Increasing", VOLSL_INC);
    System::RegisterEvent<VolatilitySlots>("Decreasing", VOLSL_DEC);
    System::RegisterEvent<VolumeSlots>("Low", VOLUME_LOW);
    System::RegisterEvent<VolumeSlots>("Medium", VOLUME_MED);
    System::RegisterEvent<VolumeSlots>("High", VOLUME_HIGH);
    System::RegisterEvent<VolumeSlots>("Increasing", VOLUME_INC);
    System::RegisterEvent<VolumeSlots>("Decreasing", VOLUME_DEC);
    System::RegisterEvent<ChannelOscillator>("Lowest", CHOSC_LOWEST);
    System::RegisterEvent<ChannelOscillator>("Low", CHOSC_LOW);
    System::RegisterEvent<ChannelOscillator>("High", CHOSC_HIGH);
    System::RegisterEvent<ChannelOscillator>("Highest", CHOSC_HIGHEST);
    System::RegisterEvent<ScissorChannelOscillator>("Low", SCIS_LOW);
    System::RegisterEvent<ScissorChannelOscillator>("High", SCIS_HIGH);
    
    
    System::RegisterEvent<DqnAdvisor>("Long", EA_DQN_LONG);
    System::RegisterEvent<DqnAdvisor>("Short", EA_DQN_SHORT);
    
    System::RegisterCommon<CalendarCommon, CalendarCtrl>("Calendar");
    
    
    
    
	//System::PrioritySlowTf().Add(System::Find<ExpertAdvisor>());
	
}

END_UPP_NAMESPACE
